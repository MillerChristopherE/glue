

// Adding a specialized nz datasource based on the sql one,
// but optimized for inserting into nz.
// Extra settings:
    // batchRecords = how many records to insert at once, default is 1 million.
datasource_nz_glue
{
    eachLine = { set, callback ->
        current.datasource_sql_glue.eachLine(set, callback);
    }
    
    transfer = { from, to ->
        def sch = null;
        def batchRecords = to.batchRecords ?: 1000 * 1000;
        def delim = to.delimiter ?: "\t";
        def ctrlChars = to.ctrlChars ?: false
        def ignoreZero = to.ignoreZero ?: false
        def maxErrors = to.maxErrors ?: 0
        def using = to.using ?: "DELIM '$delim' RemoteSource 'JDBC' CTRLCHARS $ctrlChars IGNOREZERO $ignoreZero MAXERRORS $maxErrors"
        if(!to.table)
        {
            throw new RuntimeException("Table not specified for ${to.name} (${to.name}.table)");
        }
        using = current.doSqlReplacements(using, to.params instanceof Map ? to.params : [:]);
        def tempTableName = "z_ds_temp_" + to.table;
        try
        {
            // This can silently fail.
            glueContext.sql.updateSql(to.db, "drop table $tempTableName;");
        }
        catch(Exception edrop)
        {
        }
        def f = File.createTempFile(tempTableName, ".nz");
        def fpath = f.getAbsolutePath();
        def fout = null;
        int nrecords = 0;
        def doBatch = { ->
            fout.close();
            fout = null;
            nrecords = 0;
            glueContext.sql.updateSql(to.db, """
                insert into $tempTableName
                    SELECT * FROM EXTERNAL '$fpath'
                    SAMEAS $tempTableName
                    USING ($using)
                ;""");
        }
        from.ds.eachLine from, { line ->
            if(sch == null)
            {
                sch = current.obtainTransferSchema(from, to);
                assert sch != null;
                if(true)
                {
                    def create = current._sqlCreate(to, sch);
                    if(create)
                    {
                        create << " DISTRIBUTE ON ${to.distribute ?: 'random'}";
                        try
                        {
                            if(!capabilities.contains('quiet')) println "Attempting: $create"
                            glueContext.sql.execSql(set.db, create);
                            if(!capabilities.contains('quiet')) println "Table created"
                        }
                        catch(Exception ecreate)
                        {
                            // Allow it to fail if it exists already.
                            if(!capabilities.contains('quiet')) println "Table not created, it may exist already"
                        }
                    }
                }
                glueContext.sql.updateSql(to.db, "create table $tempTableName as select * from ${to.table} limit 0 distribute on random;");
            }
            if(nrecords >= batchRecords)
            {
                doBatch();
            }
            if(!fout)
            {
                fout = f.newWriter(false);
            }
            fout << line << "\n";
            nrecords++;
        }
        if(nrecords > 0)
        {
            doBatch();
        }
        glueContext.sql.updateSql(to.db, "insert into ${to.table} select * from $tempTableName;");
        glueContext.sql.updateSql(to.db, "drop table $tempTableName;");
    }
    
    clean = { set ->
        current.datasource_sql_glue.clean(set);
    }
    
}


/*
// See datasource_sql_conf for more info.
datasource_nz_conf
{
}
*/


if(capabilities.contains('glue')) datasource_nz = datasource_nz_glue
//else if(capabilities.contains('sql_conf')) datasource_nz = datasource_nz_conf

