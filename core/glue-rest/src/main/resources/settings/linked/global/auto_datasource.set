

datasourceByType = { type ->
    if(!(type =~ /\w+/))
    {
        throw new RuntimeException("Invalid data source '" + type + "'");
    }
    def ds = evaluate("return current.datasource_" + type);
    if(!ds || !(ds instanceof Map))
    {
        throw new RuntimeException("Data source not found '" + type + "'");
    }
    if(capabilities.contains('trace')) println "TRACE: found data source '$type'";
    return ds;
}


datasourceInfoObject = { nameOrObj, wantDS = true ->
    def dio
    if(nameOrObj instanceof Map)
    {
        dio = nameOrObj;
    }
    else
    {
        def name = nameOrObj;
        if(!(name =~ /^\w+$/))
        {
            throw new RuntimeException("Invalid data info object name '" + name + "'");
        }
        dio = evaluate("return current." + name);
        if(!dio || !(dio instanceof Map))
        {
            throw new RuntimeException("Data info object not found '" + name + "'");
        }
        dio.name = name
    }
    if(!dio.type)
    {
        throw new RuntimeException("Not a valid data info object '" + (dio.name ?: "?") + "' (missing type)");
    }
    if(!dio.name)
    {
        current._lasttypeid = (current._lasttypeid ?: 0) + 1
        dio.name = "${dio.type}_${current._lasttypeid}"
    }
    if(wantDS)
    {
        dio.ds = current.datasourceByType(dio.type);
    }
    //if(capabilities.contains('trace')) println "TRACE: found data info object '${dio.name}'";
    return dio
}


datasourceDemandWrite = { set ->
    boolean readonly = set.readonly;
    if(set.readonly != true && set.readonly != false)
    {
        //readonly = false;
        readonly = set.ds.defaultIsReadonly && set.ds.defaultIsReadonly(set);
    }
    set.readonly = readonly;
    if(readonly)
    {
        throw new IOException("Permission denied: cannot copy to '$set.name' because it is readonly");
    }
}


autoClean = { to ->
    def toInfo = current.datasourceInfoObject(to);
    to = toInfo.name
    if(!toInfo.ds.clean)
    {
        throw new RuntimeException("Data source '" + toInfo.type + "' does not support clean");
    }
    current.datasourceDemandWrite(toInfo);
    if(!capabilities.contains('quiet')) println "autoClean '${to}'";
    if(current.dryrun && (!toInfo.dryrunAllowWrite || !toInfo.dryrunAllowWrite(current.datasourceInfoObject('empty'), toInfo)))
    {
        println "dryrun: not cleaning $to"
    }
    else
    {
        toInfo.ds.clean(toInfo);
    }
}


autoCopy = { from, to ->
    def fromInfo = current.datasourceInfoObject(from);
    def toInfo = current.datasourceInfoObject(to);
    from = fromInfo.name
    to = toInfo.name
    if(!toInfo.ds.transfer)
    {
        throw new RuntimeException("Data source '" + toInfo.type + "' does not support transfer");
    }
    if(toInfo.clean)
    {
        current.autoClean(to);
    }
    current.datasourceDemandWrite(toInfo);
    // transfer always called on the destination data source.
    if(!capabilities.contains('quiet')) println "autoCopy from '${from}' to '${to}'";
    if(current.dryrun && !toInfo.dryrunAllow
        && (!toInfo.dryrunAllowWrite || !toInfo.dryrunAllowWrite(fromInfo, toInfo)))
    {
        println "dryrun: not copying $from to $to (!$to.dryrunAllowWrite)"
    }
    else if(current.dryrun && !toInfo.dryrunAllow
        && (!fromInfo.dryrunAllowRead || !fromInfo.dryrunAllowRead(fromInfo)))
    {
        println "dryrun: not copying $from to $to (!$from.dryrunAllowRead)"
    }
    else
    {
        toInfo.ds.transfer(fromInfo, toInfo);
        // On successful transfer, grab schema if none yet.
        // Don't do this first so that the transfer has first chance.
        current.obtainTransferSchema(fromInfo, toInfo);
    }
}

